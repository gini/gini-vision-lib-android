plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

repositories {
    // Use repo on filesystem for using local builds
    mavenLocal()
}

dependencies {
    api "org.slf4j:slf4j-api:$deps.slf4j"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.annotation:annotation:$deps.androidxAnnotations"
    implementation project(path: ':ginivision')
    api('net.gini:gini-android-sdk:2.9.0@aar') {
        transitive = true
    }

    testImplementation deps.junit
    testImplementation deps.truth
    testImplementation deps.mockito

    androidTestImplementation deps.androidxTestJUnit
    androidTestImplementation deps.androidxTestRunner
    androidTestImplementation deps.truth
    androidTestImplementation deps.androidxTestEspressoCore
    androidTestImplementation deps.mockito
    androidTestImplementation deps.mockitoAndroid
}

apply from: rootProject.file('gradle/codequality.gradle')
apply from: rootProject.file('gradle/javadoc_coverage.gradle')

task generateJavadoc(type: GenerateJavadoc) {
    projectTitle = "Gini Vision Accounting Network Library for Android"
    source += project(":ginivision").fileTree("src/main/java/net/gini/android/vision/network")
            .files.grep { it.name.endsWith('.java') && it.name != "package-info.java"}
}

task sourcesJar(type: Jar, dependsOn: 'assembleRelease') {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: generateJavadoc) {
    classifier = 'javadoc'
    from destinationDir
}

apply from: rootProject.file('gradle/maven.gradle')
